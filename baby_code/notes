Reply to this email to message the sender
Hi Nicholas,

I've scheduled you for a technical interview via Google Hangout on Friday, July 29th at 10:00AM PST.

You will receive an additional e-mail invite with a link to connect you with your interviewer, Morag. Please accept this invitation and click the Video Call link at the time of your interview (ignore the "Where" field - this is used for internal use only).

Here is an overview of the interview and basic suggestions that will help you prepare.

During the interview, you will write and compile code in a collaborative plain text editor or IDE called CoderPad. The link to the session is: https://coderpad.io/WDQPZJYC and will be used by your interviewer as well.

You can program in the language of your choice, but you may need tools to download, compile and run the code. The interviewer will help you get set up in the first 5 minutes.

The engineer will present a question and you’ll have approximately 45 minutes to come to a workable solution. All questions are rooted in both algorithms and real world production. You’ll have about 10-15 minutes at the end to ask specific questions about our teams, company culture, etc at the end.



Technical interview tips:

1. Write quality code: We have a high bar on candidates being able to write quality code quickly. Pretend the code in the interview is going into production; don't treat it as "just interview hacking". Clean-up things as you change your mind about implementation ideas. Include comments for anything that warrants it. Don't add superfluous flow control or superfluous/unused variables. Keep best practices in mind and try to stick to them in the code you produce in the interview.

2. Demonstrate expertise: For candidates with a lot of industry experience (vs. new graduates), show expertise in your preferred language. If you've done a lot of Java development for years, you should know commonly used libraries, such as the JCF, very well. Even if you think you do know them already, consider preparing for the interview by studying API docs beforehand, just to be sure.

3. Clarifying questions should be specific: Make sure questions you ask of the interview are clarifying questions -- more to the "what" of the problem than the "how". If you do have questions about "how", be able to describe your alternatives to the interviewer and then discuss their merits.

4. Brush up on CS fundamentals: Sample topics: standard data structures, graph algorithms, big O notation, testing, code organization, leveraging OO fundamentals, functional programming, parsing.

5. Take in consideration the time constraints on solving the problem. Speak up about tradeoffs your are making, things that you would write differently. Beware of Bugs! You should also feel free to ask your interviewer on guidance on approaches.

6. Be communicative. The interviewer will want to know why you are making your decisions and how you are approaching the problem.

7. Be ready to discuss alternate methods. After you have completed a solution, the interviewer may be curious to know if you think it could have been solved another way.



Additional suggestions:

1. Be prepared to answer, "Why Square?"

2. Get familiar with our applications and products

Lastly, here are some recent articles if you want to brush up on current Square happenings:



Square's Engineering Blog

https://corner.squareup.com/


Square featured on CNBC's Disruptor 50

http://www.cnbc.com/id/102627538


Square's Jack Dorsey puts it all together

http://www.buzzfeed.com/mathonan/squares-jack-dorsey-puts-it-all-together#.egyWAX5LY
Thank you,

Michelle Ho

Square Talent Team

 